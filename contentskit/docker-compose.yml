networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks:
    - demo
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  networks:
    - demo
  restart: unless-stopped
  ports:
    - "11434:11434"
  volumes:
    - ./.cache/ollama:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks:
    - demo
  volumes:
    - ./.cache/ollama:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434"

x-whisper-asr: &service-whisper-asr
  networks:
    - demo
  restart: unless-stopped
  environment:
    - ASR_MODEL=base
  ports:
    - "9000:9000"
  volumes:
    - whisper-cache:/root/.cache

services:
  flowise:
    image: flowiseai/flowise
    networks:
      - demo
    restart: unless-stopped
    container_name: flowise
    environment:
      - PORT=3001
    ports:
      - "3001:3001"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./n8n/backup/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    networks:
      - demo
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./n8n/backup/open-webui:/app/backend/data

  postgres:
    image: postgres:16-alpine
    networks:
      - demo
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - ./n8n/backup/postgresql:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    volumes:
      - ./n8n/backup/n8n:/backup/
      - ./data:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - ./n8n/backup/n8n/qdrant:/qdrant/storage

  whisper-asr:
    build:
      context: ./whisper-asr-webservice
      dockerfile: Dockerfile.gpu
    container_name: whisper-asr
    networks:
      - demo
    restart: unless-stopped
    environment:
      - ASR_MODEL=base
    ports:
      - "9000:9000"
    volumes:
      - whisper-cache:/root/.cache
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]


  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    command:
      - "-c"
      - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.1"
    depends_on:
      - ollama-gpu

  wordpress:
    image: wordpress:latest
    container_name: wordpress
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - WORDPRESS_DB_HOST=mariadb
      - WORDPRESS_DB_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME}
      - WORDPRESS_CONFIG_EXTRA=define('WP_MEMORY_LIMIT', '256M'); define('WP_MAX_MEMORY_LIMIT', '512M'); define('WP_ALLOW_REPAIR', true); define('FS_METHOD', 'direct'); define('WP_DEBUG', false);
    volumes:
      - wordpress_data:/var/www/html
      - wordpress_uploads:/var/www/html/wp-content/uploads
    depends_on:
      mariadb:
        condition: service_healthy

  mariadb:
    image: mariadb:10.6
    container_name: mariadb
    networks:
      - demo
    restart: unless-stopped
    environment:
      - MARIADB_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MARIADB_DATABASE=${WORDPRESS_DB_NAME}
      - MARIADB_USER=${WORDPRESS_DB_USER}
      - MARIADB_PASSWORD=${WORDPRESS_DB_PASSWORD}
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./mysql-conf:/etc/mysql/conf.d
    ports:
      - "3306:3306"
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max_allowed_packet=128M
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 5s
      retries: 10

  nginx:
    image: nginx:latest
    container_name: nginx
    networks:
      - demo
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - wordpress_data:/var/www/html
    depends_on:
      - wordpress

volumes:
  whisper-cache:
  wordpress_data:
  mariadb_data:
  wordpress_uploads: